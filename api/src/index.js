import fs from 'fs'
import path from 'path'
import { ApolloServer } from 'apollo-server-express'
import express from 'express'
import bodyParser from 'body-parser'
import { v1 as neo4j } from 'neo4j-driver'
import { makeAugmentedSchema } from 'neo4j-graphql-js'
import dotenv from 'dotenv'
import http from 'http'
import PhotoScanner from './Scanner'

import { getUserFromToken, getTokenFromBearer } from './token'

// set environment variables from ../.env
dotenv.config()

const app = express()
app.use(bodyParser.json())

/*
 * Create an executable GraphQL schema object from GraphQL type definitions
 * including autogenerated queries and mutations.
 * Optionally a config object can be included to specify which types to include
 * in generated queries and/or mutations. Read more in the docs:
 * https://grandstack.io/docs/neo4j-graphql-js-api.html#makeaugmentedschemaoptions-graphqlschema
 */

const typeDefs = fs
  .readFileSync(
    process.env.GRAPHQL_SCHEMA || path.join(__dirname, 'schema.graphql')
  )
  .toString('utf-8')

import usersResolver from './resolvers/users'
import scannerResolver from './resolvers/scanner'

const schema = makeAugmentedSchema({
  typeDefs,
  config: {
    auth: {
      isAuthenticated: true,
      hasRole: true,
    },
    mutation: false,
    query: {
      exclude: ['ScannerResult', 'AuthorizeResult', 'Subscription'],
    },
  },
  resolvers: {
    Mutation: {
      ...usersResolver.mutation,
      ...scannerResolver.mutation,
    },
    Subscription: {
      ...scannerResolver.subscription,
    },
  },
})

/*
 * Create a Neo4j driver instance to connect to the database
 * using credentials specified as environment variables
 * with fallback to defaults
 */
const driver = neo4j.driver(
  process.env.NEO4J_URI || 'bolt://localhost:7687',
  neo4j.auth.basic(
    process.env.NEO4J_USER || 'neo4j',
    process.env.NEO4J_PASSWORD || 'letmein'
  )
)

const scanner = new PhotoScanner(driver)

/*
 * Create a new ApolloServer instance, serving the GraphQL schema
 * created using makeAugmentedSchema above and injecting the Neo4j driver
 * instance into the context object so it is available in the
 * generated resolvers to connect to the database.
 */
const server = new ApolloServer({
  context: async function({ req }) {
    let user = null

    if (req && req.headers.authorization) {
      const token = getTokenFromBearer(req.headers.authorization)
      user = await getUserFromToken(token, driver)
    }

    return { ...req, driver, scanner, user }
  },
  schema: schema,
  introspection: true,
  playground: true,
  subscriptions: {
    onConnect: async (connectionParams, webSocket) => {
      const token = getTokenFromBearer(connectionParams.Authorization)
      const user = await getUserFromToken(token, driver)

      return {
        token,
        user,
      }
    },
  },
})

// Specify port and path for GraphQL endpoint
const port = process.env.GRAPHQL_LISTEN_PORT || 4001
const graphPath = '/graphql'

/*
 * Optionally, apply Express middleware for authentication, etc
 * This also also allows us to specify a path for the GraphQL endpoint
 */
server.applyMiddleware({ app, graphPath })

const httpServer = http.createServer(app)
server.installSubscriptionHandlers(httpServer)

httpServer.listen({ port, graphPath }, () => {
  console.log(
    `ðŸš€ GraphQL endpoint ready at http://localhost:${port}${server.graphqlPath}`
  )
  console.log(
    `ðŸš€ Subscriptions ready at ws://localhost:${port}${server.subscriptionsPath}`
  )
})
