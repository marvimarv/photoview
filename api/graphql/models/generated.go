// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package models

import (
	"fmt"
	"io"
	"strconv"
	"time"
)

type AuthorizeResult struct {
	Success bool    `json:"success"`
	Status  string  `json:"status"`
	Token   *string `json:"token"`
}

type Filter struct {
	OrderBy        *string         `json:"order_by"`
	OrderDirection *OrderDirection `json:"order_direction"`
	Limit          *int            `json:"limit"`
	Offset         *int            `json:"offset"`
}

type Notification struct {
	Key      string           `json:"key"`
	Type     NotificationType `json:"type"`
	Header   string           `json:"header"`
	Content  string           `json:"content"`
	Progress *float64         `json:"progress"`
	Positive bool             `json:"positive"`
	Negative bool             `json:"negative"`
}

type PhotoDownload struct {
	Title string `json:"title"`
	URL   string `json:"url"`
}

// EXIF metadata from the camera
type PhotoExif struct {
	Photo *Photo `json:"photo"`
	// The model name of the camera
	Camera *string `json:"camera"`
	// The maker of the camera
	Maker *string `json:"maker"`
	// The name of the lens
	Lens     *string    `json:"lens"`
	DateShot *time.Time `json:"dateShot"`
	// The formatted filesize of the image
	FileSize *string `json:"fileSize"`
	// The exposure time of the image
	Exposure *string `json:"exposure"`
	// The aperature stops of the image
	Aperture *float64 `json:"aperture"`
	// The ISO setting of the image
	Iso *int `json:"iso"`
	// The focal length of the lens, when the image was taken
	FocalLength *string `json:"focalLength"`
	// A formatted description of the flash settings, when the image was taken
	Flash *string `json:"flash"`
}

type ScannerResult struct {
	Finished bool     `json:"finished"`
	Success  bool     `json:"success"`
	Progress *float64 `json:"progress"`
	Message  *string  `json:"message"`
}

// General public information about the site
type SiteInfo struct {
	InitialSetup bool `json:"initialSetup"`
}

type NotificationType string

const (
	NotificationTypeMessage  NotificationType = "Message"
	NotificationTypeProgress NotificationType = "Progress"
)

var AllNotificationType = []NotificationType{
	NotificationTypeMessage,
	NotificationTypeProgress,
}

func (e NotificationType) IsValid() bool {
	switch e {
	case NotificationTypeMessage, NotificationTypeProgress:
		return true
	}
	return false
}

func (e NotificationType) String() string {
	return string(e)
}

func (e *NotificationType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = NotificationType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid NotificationType", str)
	}
	return nil
}

func (e NotificationType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type OrderDirection string

const (
	OrderDirectionAsc  OrderDirection = "ASC"
	OrderDirectionDesc OrderDirection = "DESC"
)

var AllOrderDirection = []OrderDirection{
	OrderDirectionAsc,
	OrderDirectionDesc,
}

func (e OrderDirection) IsValid() bool {
	switch e {
	case OrderDirectionAsc, OrderDirectionDesc:
		return true
	}
	return false
}

func (e OrderDirection) String() string {
	return string(e)
}

func (e *OrderDirection) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = OrderDirection(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid OrderDirection", str)
	}
	return nil
}

func (e OrderDirection) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
