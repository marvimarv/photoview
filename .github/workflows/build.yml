name: Docker builds

on:
  schedule:
    - cron: "0 10 * * *" # everyday at 10am
  pull_request:
    branches: master
  push:
    branches: master
    tags:
      - v*
      
env:
  DOCKER_USERNAME: viktorstrate
  DOCKER_IMAGE: viktorstrate/photoview
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-20.04
    
    strategy:
      matrix:
        target_platform:
          - "linux/amd64"
          - "linux/arm64"
          - "linux/arm/v7"
          - "linux/arm/v6"
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        id: cache
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ secrets.CACHE_KEY }}-${{ matrix.target_platform }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-${{ secrets.CACHE_KEY }}-${{ matrix.target_platform }}-

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
        with:
          platforms: ${{ matrix.target_platform }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Prepare
        id: prepare
        run: |
          DOCKER_PLATFORMS=${{ matrix.target_platform }}
          VERSION=edge

          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          
          OUTPUT_PLATFORM=$(echo ${{ matrix.target_platform }} | sed 's/\//-/g')
          echo ::set-output name=output_platform::${OUTPUT_PLATFORM}
          
          TAG="--tag ${OUTPUT_PLATFORM}-${GITHUB_SHA::8}"

          echo ::set-output name=docker_username::${DOCKER_USERNAME}
          echo ::set-output name=docker_image::${DOCKER_IMAGE}
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=buildx_args::--platform ${DOCKER_PLATFORMS} \
            --progress=plain \
            --cache-from "type=local,src=/tmp/.buildx-cache" \
            --cache-to "type=local,dest=/tmp/.buildx-cache" \
            --build-arg VERSION=${VERSION} \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${GITHUB_SHA::8} \
            ${TAG} --file Dockerfile .

      - name: Docker Build
        run: |
          mkdir -p /tmp/docker-image-${{ matrix.target_platform }}
          docker buildx build --output "type=image,push=false" ${{ steps.prepare.outputs.buildx_args
          
      - name: Docker Login
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin

      - name: Push to Docker Hub
        run: |
          docker buildx build --output "type=image,push=true" ${{ steps.prepare.outputs.buildx_args }}
      
      - name: Clear
        run: |
          rm -f ${HOME}/.docker/config.json

  docker-manifest:
    name: Combine Docker Images
    runs-on: ubuntu-20.04
    if: github.event_name != 'pull_request' && github.repository == 'photoview/photoview'
    
    needs: [build]
    
    steps:
      - name: Docker Login
        run: |
          echo "${DOCKER_PASSWORD}" | docker login --username "${{ steps.prepare.outputs.docker_username }}" --password-stdin
          
      - name: Create Manifest
        run: |
          DOCKER_IMAGES="viktorstrate/photoview:linux-amd64-${GITHUB_SHA::8}"
          DOCKER_IMAGES="${DOCKER_IMAGES} viktorstrate/photoview:linux-arm64-${GITHUB_SHA::8}"
          DOCKER_IMAGES="${DOCKER_IMAGES} viktorstrate/photoview:linux-arm-v7-${GITHUB_SHA::8}"
          DOCKER_IMAGES="${DOCKER_IMAGES} viktorstrate/photoview:linux-arm-v6-${GITHUB_SHA::8}"
          
          docker manifest create viktorstrate/photoview:test ${DOCKER_IMAGES}
          docker manifest push viktorstrate/photoview:test

